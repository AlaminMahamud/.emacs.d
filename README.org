#+TITLE: Alamin's Emacs Configuration
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com

#+STARTUP: overview indent inlineimages
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamp:t
#+LAYOUT: post
#+DESCRIPTION: Loading Emacs Configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* Introduction

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Md. Alamin Mahamud")
  (setq user-mail-address "alamin.ineedahelp@gmail.com")
#+END_SRC

* Package Initialization
** Package Manager
#+IDEA: Howard Abrams, Build Fun Things
Because the default setting for =package-archives= is to use the HTTP access to use the GNU archive, set the variable to 'nil' before adding the HTTPS variants.
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives nil)
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "http://melpa.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))
#+END_SRC

Initialize the archive and refresh the contents in case there is no cached archive
#+BEGIN_SRC emacs-lisp
(package-initialize)

(unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable")
             (file-exists-p "~/.emacs.d/elpa/archives/marmalade"))
  (package-refresh-contents))
#+END_SRC

** use-package
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

* load custom file
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file :noerror)
#+END_SRC
* Editing
** Mark Ring
#+BEGIN_SRC emacs-lisp
  (setq global-mark-ring-max 5000   ; increase mark ring to contains 5000 entries
        mark-ring-max 5000          ; increase kill to contains 5000 entries
        mode-require-final-newline t; add a newline to end of file
        )
#+END_SRC
** Coding System
#+BEGIN_SRC emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
#+END_SRC
** Linum
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'linum-mode) ;; enable linum only in programming modes
#+END_SRC
** Killing
#+BEGIN_SRC emacs-lisp
(setq
 kill-ring-max 5000 ; increase kill-ring capacity
 kill-whole-line t  ; if NIL, kill whole line and move the next line up
 )
#+END_SRC
** whitespace in diff mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'diff-mode-hook
            (lambda ()
              (setq-local
               whitespace-style
               '(
                 face
                 tabs
                 spaces
                 space-mark
                 trailing
                 indentation::space
                 indentation::tab
                 newline
                 newline-mark))
              (whitespace-mode 1)))
#+END_SRC
** delete-selection-mode
#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
#+END_SRC
** newline-and-indent
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC
** duplicate-thing
_Author_      : ongaeshi, =ongaeshi0621@gmail.com=

_Homepage_    : [[https://github.com/ongaeshi/duplicate-thing][Github]]

_Features_    : Easy duplicate line or region, with comment out
- Duplicate current line
- Duplicate a selection when selection is active.
- Only C-u, replicate, comment out the range.
- Numerical prefix is specified as 'C-u 5': do multiple times repeatedly.

_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package duplicate-thing
:ensure t
:config
(require 'duplicate-thing)
(global-set-key (kbd "M-c") 'duplicate-thing))
#+END_SRC

_Usage_       : If point is on a line, the command duplicates the current line. If region is active, duplicates region instead.

** volatile-highlights
_Author_      : Keitalo Miyazaki, =keitaro.miyazaki@gmail.com=
_Homepage_    : [[http://www.emacswiki.org/emacs/VolatileHighlights][Emacswiki]]
_Features_    : 'Volatile Highlights' highlights changes to the buffer caused by commands such as ‘undo’, ‘yank’/’yank-pop’, etc. The highlight disappears at the next command. The highlighting gives useful visual feedback for what your operation actually changed in the buffer.
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
:ensure t
:config
(require 'volatile-highlights)
(volatile-highlights-mode t))
#+END_SRC
_Usage_       : When you yank (paste) something, the yanked region will be highlighted.

** smartparens
_Author_  : Matus Goljer, =matus.goljer@gmail.com=
_Homepage_: [[https://github.com/Fuco1/smartparens][Github]]
_Features_: Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
 - It can automatically insert pairs
[[https://github.com/Fuco1/smartparens/raw/master/images/smartparens-insert.gif]]
- wrap, unwrap and rewrap pairs
[[https://github.com/Fuco1/smartparens/raw/master/images/smartparens-wrap.gif]]
- expand and contract pairs
[[https://github.com/Fuco1/smartparens/raw/master/images/smartparens-slurp.gif]]
- navigate pairs
[[https://github.com/Fuco1/smartparens/raw/master/images/smartparens-navigate.gif]]
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package smartparens-config
:ensure smartparens
:config
(progn
(show-smartparens-global-mode t)))

(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
(bind-keys
 :map smartparens-mode-map
 ("C-M-a" . sp-beginning-of-sexp)
 ("C-M-e" . sp-end-of-sexp)

 ("C-<down>" . sp-down-sexp)
 ("C-<up>"   . sp-up-sexp)
 ("M-<down>" . sp-backward-down-sexp)
 ("M-<up>"   . sp-backward-up-sexp)

 ("C-M-f" . sp-forward-sexp)
 ("C-M-b" . sp-backward-sexp)

 ("C-M-n" . sp-next-sexp)
 ("C-M-p" . sp-previous-sexp)

 ("C-S-f" . sp-forward-symbol)
 ("C-S-b" . sp-backward-symbol)

 ("C-<right>" . sp-forward-slurp-sexp)
 ("M-<right>" . sp-forward-barf-sexp)
 ("C-<left>"  . sp-backward-slurp-sexp)
 ("M-<left>"  . sp-backward-barf-sexp)

 ("C-M-t" . sp-transpose-sexp)
 ("C-M-k" . sp-kill-sexp)
 ("C-k"   . sp-kill-hybrid-sexp)
 ("M-k"   . sp-backward-kill-sexp)
 ("C-M-w" . sp-copy-sexp)
 ("C-M-d" . delete-sexp)

 ("M-<backspace>" . backward-kill-word)
 ("C-<backspace>" . sp-backward-kill-word)
 ([remap sp-backward-kill-word] . backward-kill-word)

 ("M-[" . sp-backward-unwrap-sexp)
 ("M-]" . sp-unwrap-sexp)

 ("C-x C-t" . sp-transpose-hybrid-sexp)

 ("C-c ("  . wrap-with-parens)
 ("C-c ["  . wrap-with-brackets)
 ("C-c {"  . wrap-with-braces)
 ("C-c M-'"  . wrap-with-single-quotes)
 ("C-c \"" . wrap-with-double-quotes)
 ("C-c _"  . wrap-with-underscores)
 ("C-c `"  . wrap-with-back-quotes))
#+END_SRC
** clean-aindent-mode
_Author_  :
_Homepage_:
_Features_:
When you press RET to create a newline and got indented by eletric-indent-mode, you have appropriate whitespace for indenting. But, if you leave the line blank and move to the next line, the whitespace becomes useless. This package helps clean up unused whitespace.
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package clean-aindent-mode
:ensure t
:config
(require 'clean-aindent-mode))

(add-hook 'prog-mode-hook 'clean-aindent-mode)
#+END_SRC
_Usage_:
Automatically cleanup whitespaced on moving up/down
** undo-tree
_Author_:
_Homepage_:
_Features_:
undo-tree allows you to visual the whole history of your editing in a
tree. It also provides regular undo/redo behaviours in other
editors. undo-tree can even provide a diff between two different
states. Highly recommended.
[[https://tuhdo.github.io/static/part3/undo-tree.jpg]]
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
:ensure t
:config
(require 'undo-tree)
(global-undo-tree-mode))
#+END_SRC
_Usage_:
undo =C-/=
redo =C-_=
see undo tree =C-x u=
** yasnippet
_Author_:
_Homepage_: [[https://github.com/joaotavora/yasnippet][Github]]
_Features_: YASnippet is a template system for Emacs. It allows you to type an abbreviation and automatically expand it into function templates. Bundled language templates include: C, C++, C#, Perl, Python, Ruby, SQL, LaTeX, HTML, CSS and more. The snippet syntax is inspired from TextMate's syntax, you can even import most TextMate templates to YASnippet. Watch a demo on YouTube.
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:ensure t
:config
(require 'yasnippet)
(yas-global-mode 1))
#+END_SRC
_usage_:
** Origami
_author_:
_homepage_: [[https://github.com/gregsexton/origami.el]]
_features_:
text-folding minor mode
[[https://camo.githubusercontent.com/c5f625fcf6bdeda0381ee5370026c7027433d1d7/687474703a2f2f7777772e67726567736578746f6e2e6f72672f696d616765732f6f726967616d692d73637265656e2e706e67]]

_installation_:
#+BEGIN_SRC emacs-lisp
  (use-package origami
  :ensure t
  :config
  (require 'origami)
  (add-hook 'prog-mode-hook 'origami-mode)
  (define-key origami-mode-map (kbd "C-c f") 'origami-recursively-toggle-node)
  (define-key origami-mode-map (kbd "C-c F") 'origami-toggle-all-nodes))
#+END_SRC
_usage_:

** Rebox2
#+BEGIN_SRC emacs-lisp
(use-package rebox2
:ensure t
:config
(rebox-mode) 1)
#+END_SRC

** dtrt-indent
#+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :ensure t
:init
  (dtrt-indent-mode 1)
  (setq dtrt-indent-verbosity 0))
#+END_SRC
** ws-butler
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
:ensure t
  :init
  (add-hook 'prog-mode-hook 'ws-butler-mode)
  (add-hook 'text-mode 'ws-butler-mode)
  (add-hook 'fundamental-mode 'ws-butler-mode))
#+END_SRC
** comment-dwim-2
_author_:
_homepage_: [[https://github.com/remyferre/comment-dwim-2]]
_features_:
comment-dwim-2 is a replacement for the Emacs' built-in command comment-dwim which includes more comment features, including:

+ commenting/uncommenting the current line (or region, if active)
+ inserting an inline comment
+ killing the inline comment
+ reindenting the inline comment
#+BEGIN_SRC emacs-lisp
  (use-package comment-dwim-2
  :ensure t
  :config
  (global-set-key (kbd "M-;") 'comment-dwim-2))
#+END_SRC

** anzu mode
(use-package anzu
:ensure t
  :init
  (global-anzu-mode)
  (global-set-key (kbd "M-%") 'anzu-query-replace)
  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp))
** iedit
_author_:
_homepage_: https://github.com/victorhge/iedit
_features_:
edit one occurrence of some text in a buffer (possibly narrowed) or region, and simultaneously have other occurrences edited in the same way, with visual feedback as you type.
#+BEGIN_SRC emacs-lisp
(use-package iedit
  :bind (("C-;" . iedit-mode))
  :init
  (setq iedit-toggle-key-default nil))
#+END_SRC
_usage_:
Normal work flow of Iedit mode is like:

- Move to certain point and press C-; (The default key binding). All occurrences of a symbol, string or a region in the buffer are highlighted corresponding to the thing under the point, current mark and prefix argument. Refer to the document of `iedit-mode’ for details.
- Edit one of the occurrences The change is applied to other occurrences simultaneously.
- Finish - by pressing C-; again
** function-args
#+BEGIN_SRC emacs-lisp
(use-package function-args
:ensure t
:config
(require 'function-args)
(fa-config-default)
)
#+END_SRC
** sentences end with single space
(setq sentence-end-double-space nil)
** Revert buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f8>") 'revert-buffer)
#+END_SRC
** UTF-8
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
* Convenience
** Replace yes with y
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** auto-revert
link: http://pragmaticemacs.com/emacs/automatically-revert-buffers/

#+BEGIN_SRC emacs-lisp
;(global-auto-revert-mode 1)
; auto refresh dired when file changes
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
** Workgroups2
Create your workspace in emacs

_Features_:
Workgroups is a session manager for Emacs.
- It saves all your opened buffers, their locations and sizes on disk
  to restore later.
- create several workspaces.

You can also restore buffers such as org-agenda, shell, magit-status,
help.
_Installation_:
#+BEGIN_SRC emacs-lisp
  (use-package workgroups2
  :ensure t
  :config
  (require 'workgroups2)

  ;; Change prefix key (before activating WG)
  (setq wg-prefix-key (kbd "C-c z"))
  ;; Change workgroups session file
  (setq wg-session-file "~/.emacs.d/.emacs_workgroups")
  ;; What to do on Emacs exit / workgroups-mode exit?
  (setq wg-emacs-exit-save-behavior           'save)
  (setq wg-workgroups-mode-exit-save-behavior 'save)

  ;; Mode Line Changes
  ;; Display workgroups in Mode Line?
  (setq wg-mode-line-display-on t)
  (setq wg-flag-modified t)
  (setq wg-mode-line-decor-left-brace "["
        wg-mode-line-decor-right-brace "]"
        wg-mode-line-decor-divider ":")
  (workgroups-mode 1))
#+END_SRC
** hippe Expand
hippe-expand is a better version of dabbrev-expand
while dabbrev-expand searches for words you already types in current
buffers and other buffers, hippie-expand includes more sources
such as filenames, kill ring...
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand) ;; replace dabbrev-expand
(setq
hippie-expand-try-functions-list
'(try-expand-dabbrev ;; Try to expand word "dynamically", searching the current buffer.
   try-expand-dabbrev-all-buffers ;; Try to expand word "dynamically", searching all other buffers.
   try-expand-dabbrev-from-kill ;; Try to expand word "dynamically", searching the kill ring.
   try-complete-file-name-partially ;; Try to complete text as a file name, as many characters as unique.
   try-complete-file-name ;; Try to complete text as a file name.
   try-expand-all-abbrevs ;; Try to expand word before point according to all abbrev tables.
   try-expand-list ;; Try to complete the current line to an entire line in the buffer.
   try-expand-line ;; Try to complete the current line to an entire line in the buffer.
   try-complete-lisp-symbol-partially ;; Try to complete as an Emacs Lisp symbol, as many characters as unique.
   try-complete-lisp-symbol) ;; Try to complete word as an Emacs Lisp symbol.
)
#+END_SRC
** Highlight current line
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode)
#+END_SRC
** Ibuffer
#+BEGIN_SRC emacs-lisp
(setq ibuffer-use-other-window t) ;; always display ibuffer in another window
#+END_SRC
** useless whitespace
#+BEGIN_SRC emacs-lisp
;; whenever you create useless whitespace, the whitespace is highlighted
(add-hook 'prog-mode-hook (lambda () (interactive) (setq show-trailing-whitespace 1)))

;; activate whitespace-mode to view all whitespace characters
(global-set-key (kbd "C-c w") 'whitespace-mode)

#+END_SRC

** easier window navigation
#+BEGIN_SRC emacs-lisp
(windmove-default-keybindings)
#+END_SRC
** company
_Author_:
_Homepage_:
_Features_:
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
_usage_:
** expand-region
_Author_:
_Homepage_:
_Features_:
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package expand-region
:ensure t
:config
(require 'expand-region)
(global-set-key (kbd "M-m") 'er/expand-region))
#+END_SRC
_usage_:
** ibuffer-vc
_Author_:
_Homepage_:
_Features_:
_Installation_:
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
    :ensure t
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic))))
  (setq ibuffer-formats
        '((mark modified read-only vc-status-mini " "
                (name 18 18 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " "
                (vc-status 16 16 :left)
                " "
                filename-and-process))))

#+END_SRC
_usage_:
** projectile
_Author_:
_Homepage_:
_Features_:
project interaction lib
- jump to a file in project
- jump to a directory in a project
- jump to file in a dir
- jump to a project buffer
- jump to a test in project
- toggle between code and its test
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- multi-occur in project buffers
- grep in project
- regenerate project etags or gtags
- visit project in dired
- run make in a project with a single key chord
- check for dirty repos
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package projectile
:ensure t
:config
(projectile-global-mode))
#+END_SRC
_usage_:
** Kill this buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
** bm
Bookmarks are very useful for quickly jumping around files.
#+BEGIN_SRC emacs-lisp
(use-package bm
  :ensure t
  :bind (("C-c =" . bm-toggle)
         ("C-c [" . bm-previous)
         ("C-c ]" . bm-next)))
#+END_SRC

** Windows management
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
  (global-set-key (kbd "C-x o") 'ace-window)
:diminish ace-window-mode)

(use-package ace-jump-mode
  :ensure t
  :config
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+END_SRC
Other options
- windmove
- switch-window
** inhibit start message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** indent whole buffer
#+BEGIN_SRC emacs-lisp

  (defun iwb ()
    "indent whole buffer"
    (interactive)
    (delete-trailing-whitespace)
    (indent-region (point-min) (point-max) nil)
    (untabify (point-min) (point-max)))

  (global-set-key (kbd "C-c n") 'iwb)

#+END_SRC
** command-log-mode
#+BEGIN_SRC emacs-lisp
(use-package command-log-mode
  :ensure t)
#+END_SRC
** zygospore
_author_: 
_homepage_: https://github.com/LouisKottmann/zygospore.el
_features_:
zygospore lets you revert C-x 1 (delete-other-window) by pressing C-x
1 again
[[https://github.com/LouisKottmann/zygospore.el/raw/master/demo.gif]]
_installation_:
#+BEGIN_SRC emacs-lisp
(use-package zygospore
:ensure t
  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
         ("RET" .   newline-and-indent)))
#+END_SRC
_usage_:
** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
:ensure t
:config
(beacon-mode 1))
#+END_SRC
** Smartscan
Quickly jumps between other symbols found at point in Emacs
*How it works*: 
Smart Scan will try to infer the symbol your point is on and let you jump to other, identical, symbols elsewhere in your current buffer with a single key stroke. The advantage over isearch is its unintrusiveness; there are no menus, prompts or other UI elements that require your attention.
#+BEGIN_SRC emacs-lisp
(use-package smartscan
  :defer t
  :config (global-smartscan-mode t))
#+END_SRC
** saveplace
#+BEGIN_SRC emacs-lisp
;; saveplace remembers your location in a file when saving files
(require 'saveplace)
(setq-default save-place t)
#+END_SRC
* Files
** large-file-warning
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold 100000000) ;; size in bytes
#+END_SRC
** Backup
#+BEGIN_SRC emacs-lisp
(defvar backup-directory "~/.backups")
(if (not (file-exists-p backup-directory))
    (make-directory backup-directory t))
(setq
 make-backup-files t        ; backup a file the first time it is saved
 backup-directory-alist `((".*" . ,backup-directory)) ; save backup files in ~/.backups
 backup-by-copying t     ; copy the current file into backup directory
 version-control t   ; version numbers for backup files
 delete-old-versions t   ; delete unnecessary versions
 kept-old-versions 6     ; oldest versions to keep when a new numbered backup is made (default: 2)
 kept-new-versions 9 ; newest versions to keep when a new numbered backup is made (default: 2)
 auto-save-default t ; auto-save every buffer that visits a file
 auto-save-timeout 20 ; number of seconds idle time before auto-save (default: 30)
 auto-save-interval 200 ; number of keystrokes between auto-saves (default: 300)
 )

#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(setq
 dired-dwim-target t            ; if another Dired buffer is visible in another window, use that directory as target for Rename/Copy
 dired-recursive-copies 'always         ; "always" means no asking
 dired-recursive-deletes 'top           ; "top" means ask once for top level directory
 dired-listing-switches "-lha"          ; human-readable listing
 )
#+END_SRC
Automatically refresh dired buffer on changes
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'auto-revert-mode)
#+END_SRC
If it is not windows, use the following listing switches
#+BEGIN_SRC emacs-lisp
;; if it is not Windows, use the following listing switches
(when (not (eq system-type 'windows-nt))
  (setq dired-listing-switches "-lha --group-directories-first"))
(require 'dired-x)
#+END_SRC
Wdired allows you to edit a Dired buffer and write changes to disk
#+BEGIN_SRC emacs-lisp
;; - Switch to Wdired by C-x C-q
;; - Edit the Dired buffer, i.e. change filenames
;; - Commit by C-c C-c, abort by C-c C-k
(require 'wdired)
(setq
 wdired-allow-to-change-permissions t   ; allow to edit permission bits
 wdired-allow-to-redirect-links t       ; allow to edit symlinks
 )
#+END_SRC
** Recentf
#+BEGIN_SRC emacs-lisp
  (recentf-mode)
  (setq recentf-max-menu-items 30
        recentf-max-saved-items 5000)
  (global-set-key (kbd "<f7>") 'recentf-open-files)
#+END_SRC
** Dired+
_Author_:
_Homepage_:
_Features_: Extension to DIRED
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package dired+
:ensure t
:config
(require 'dired+))

#+END_SRC

_usage_:
** recentf-ext
_Author_:
_Homepage_:
_Features_:
Extension of `recentf` package.
- `dired` buffers can be handled
- switching to file buffer considers it as most recent file.
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package recentf-ext
:ensure t
:config
(require 'recentf-ext))
#+END_SRC

_usage_:
** ztree
_Author_:
_Homepage_:
_Features_:
Ztree is a project dedicated to implementation of several text-tree applications inside Emacs. It consists of 2 sub-projects: ztree-diff and ztree-dir(the basis of ztree-diff).
_Installation_:
#+BEGIN_SRC emacs-lisp
(use-package ztree
:ensure t
:config
(require 'ztree-diff)
(require 'ztree-dir))
#+END_SRC
_usage_:
** TODO vlf
_Author_:
_Homepage_:
_Features_:
Emacs minor mode that allows viewing, editing, searching and comparing large files in batches. Batch size can be adjusted on the fly and bounds the memory that is to be used for operations on the file. This way multiple large files (like terabytes or whatever) can be instantly and simultaneously accessed without swapping and degraded performance.

regular expression search on whole file (in constant memory determined by current batch size)
chunk editing (if size has changed, saving is done in constant memory determined by current batch size)
Occur like indexing
options to jump to beginning, end or arbitrary file chunk
ability to jump/insert given number of batches at once
newly added content is acknowledged if file has changed size meanwhile
automatic scrolling of batches
as a minor mode, font locking and functionality of the respective major mode is also present
by batch Ediff comparison
can be added as option to automatically open large files
smooth integration with hexl-mode
works with TRAMP so accessing network files is fine

_Installation_:
_usage_:

** History
#+BEGIN_SRC emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC
* Things to Consider
** A Secure Emacs Environment - Build Fun Things
** Modernizing Emacs - Howard Abrams
** Emacs Enhancement - Howard Abrams
Load up a collection of enhancement to Emacs Lisp, including [[https://github.com/magnars/dash.el][dash]], [[https://github.com/magnars/s.el][s]] for string manipulation, and [[https://github.com/rejeep/f.el][f]] for file manipulation.
** TODO Pop to mark
Handy way of getting back to previous places
#+BEGIN_SRC emacs-lisp
(bind-key "C-x p" 'pop-to-mark-command)
(setq set-mark-command-repeat-pop t)
#+END_SRC
** TODO Frequently-accessed files
[[http://pages.sachachua.com/.emacs.d/Sacha.html#org9750649]]
** TODO Shuffling Lines - Sacha Chua
** password manamgement
** flyspell
** GUD
** term-mode
** ansi-term
** shell-pop
