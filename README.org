#+TITLE: Alamin's Emacs Configuration
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com
#+STARTUP: overview indent inlineimages hideblocks
#+TAGS: Drill(d)

* Introduction
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Alamin Mahamud")
  (setq user-mail-address "alamin.ineedahelp@gmail.com")
#+END_SRC
* General Settings
** Platform Specific Configuration
*** OS X Desktop
*** OS X CLI in <terminal>
** Maximum Workspace
#+BEGIN_SRC emacs-lisp
  (if
      (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))

  (if
      (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))

  (if
      (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

  (setq inhibit-startup-message t)
#+END_SRC
** Client/server

Emacs has a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html#Emacs-Server][client/server]] model for editing. The client is invoked via [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Invoking-emacsclient.html][the
=emacsclient= command]]. More information on configuration is available on the
[[http://www.emacswiki.org/emacs/EmacsClient][EmacsWiki EmacsClient page]].

We make sure the server is running, additionally guarded to check if the version
of Emacs we're using supports the server package:

#+begin_src emacs-lisp
  (when (require 'server nil t)
    (unless (server-running-p)
      (server-start)))
#+end_src

** Custom Settings
#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
** Load Secrets
#+begin_src emacs-lisp
(load "~/.emacs.d/.secrets")
#+end_src
** Elisp Enhancement
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (use-package dash
    :config (eval-after-load "dash" '(dash-enable-font-lock)))
  (use-package s)
  (use-package f)
  (use-package diminish)
  (use-package wgrep)
  (use-package scratch)
#+END_SRC
* Package Initialization
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives nil)
  (setq package-archives
        '(
          ("org"       . "https://orgmode.org/elpa/")
          ("gnu"       . "http://elpa.gnu.org/packages/")
          ("melpa"     . "http://melpa.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))

  (package-initialize)
  (unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable")
               (file-exists-p "~/.emacs.d/elpa/archives/marmalade")
               )
    (package-refresh-contents))

  ;; use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
* Appearance
** Syntax Highlighting
#+BEGIN_SRC emacs-lisp
  (setq font-lock-maximum-decoration t
        color-theme-is-global t
        truncate-partial-width-windows nil)
#+END_SRC
** Scratch Buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message (concat ";; One Brick A Day, " user-login-name " - Emacs ♥ you!\n\n"))
#+END_SRC
** Arjen Grey Theme
#+BEGIN_SRC emacs-lisp
  (use-package arjen-grey-theme
    :config
    (load-theme 'arjen-grey t))
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  (if (or (eq system-type 'darwin)(eq system-type 'gnu/linux) )
  ;    (set-face-attribute 'default nil :font "Consolas-14")
  ;    (set-face-attribute 'default nil :font "Inconsolata-14")
       (set-face-attribute 'default nil :font "Monaco-15" :weight 'bold)
  ;    (set-face-attribute 'default nil :font "Hack-16")
  ;    (set-face-attribute 'default nil :font "DejaVu Sans Mono-16")
    (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 110))

  ;; set italic font for italic face, since Emacs does not set italic
  ;; face automatically
  (set-face-attribute 'italic nil
                      :family "Hack-Italic")
#+END_SRC
** All The Icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired)
  (use-package pretty-mode)
#+END_SRC
** Cursor

On modern operating systems, a vertical bar is used as a cursor:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq-default cursor-type 'box))
#+end_src

Make the cursor blink (interestingly in Emacs 24.4+ the [[https://lists.gnu.org/archive/html/emacs-diffs/2013-07/msg00208.html][cursor automatically
stops blinking after a period to conserve CPU]]).

Make the cursor blink every second:

#+begin_src emacs-lisp
  (when (display-graphic-p)
    (setq blink-cursor-interval 1.0)
    (blink-cursor-mode 1))
#+end_src

** Typing

Show the modifier combinations I just typed almost immediately:

#+begin_src emacs-lisp
  (setq echo-keystrokes 0.1)
#+end_src

Don't make me type =yes= or =no= to boolean interface questions:

#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Bells

Don't make a sound when [[http://www.gnu.org/software/emacs/manual/html_node/elisp/Beeping.html][ringing a bell]] - flash a visual bell instead:

#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src

Override the =ring-bell-function= to conditionally ring the bell only when it's
not a valid quit case like hitting =esc= or =C-g=. Generally this means the bell
will only ring when there's actually an error raised somehow:

#+begin_src emacs-lisp
  (setq ring-bell-function
        (lambda ()
          "Only rings the bell if it's not a valid quit case, e.g
  keyboard-quit"
          (unless (memq this-command
                        '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
            (ding))))
#+end_src

** Buffer naming

By default Emacs resolves conflicting buffer names by appending a number to
them. For instance, if I open =~/src/thing/init.el= and
=~/src/other-thing/init.el= they'll be named =init.el= and =init.el<2>=
respectively.

We can use [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Uniquify.html][Uniquify]] library to name them =thing/init.el= and
=other-thing/init.el=, which is much easier to make sense of.

#+begin_src emacs-lisp
  (require 'uniquify)
  (setq uniquify-buffer-name-style 'forward)
#+end_src
** Frame Title Format
#+BEGIN_SRC emacs-lisp
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (tooltip-mode -1)
    (blink-cursor-mode -1)
    )
#+END_SRC

** Clipboard management

Make sure that [[http://pragmaticemacs.com/emacs/add-the-system-clipboard-to-the-emacs-kill-ring/][out-of-Emacs clipboard gets into the kill ring]]:

#+begin_src emacs-lisp
  (setq save-interprogram-paste-before-kill t)
#+end_src
** Highlight Current Line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 0)
#+END_SRC
** Highlight Numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:config
(add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** Highlight Symbol
#+BEGIN_SRC emacs-lisp
    (use-package highlight-symbol
    :config

    (require 'highlight-symbol)
    (highlight-symbol-nav-mode)
    (add-hook 'prog-mode-hook
              (lambda() (highlight-symbol-mode)))
    (add-hook 'org-mode-hook (lambda () (highlight-symbol-mode)))
  (setq highlight-symbol-idle-delay 0.2
        highlight-symbol-on-navigation-p t)

  (global-set-key [(control shift mouse-1)]
                  (lambda (event)
                    (interactive "e")
                    (goto-char (posn-point (event-start event)))
                    (highlight-symbol-at-point)))

  (global-set-key (kbd "M-n") 'highlight-symbol-next)
  (global-set-key (kbd "M-p") 'highlight-symbol-prev))
#+END_SRC
* Third Party Packages
** Atomic Chrome
#+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (require 'atomic-chrome)
    (atomic-chrome-start-server)
    (setq atomic-chrome-buffer-open-style 'full))
#+end_src
** Whitespace Mode
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :bind ("C-c T w" . whitespace-mode)
    :init
    (setq whitespace-line-column nil
          whitespace-display-mappings '((space-mark 32 [183] [46])
                                        (newline-mark 10 [9166 10])
                                        (tab-mark 9 [9654 9] [92 9])))
    :config
    (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
    :diminish whitespace-mode)
#+END_SRC
** Try
#+begin_src emacs-lisp
(use-package try)
#+end_src
** Workgroups2
- create your workspace in emacs
- saves all your opened buffers, their locations and sizes on disk to restore later
#+begin_src emacs-lisp
  (use-package workgroups2
    :config
    (require 'workgroups2)

    ;; Change prefix key (before activating WG)
    (setq wg-prefix-key (kbd "C-c z"))
    ;; Change workgroups session file
    (setq wg-session-file "~/.emacs.d/.emacs_workgroups")
    ;; What to do on Emacs exit / workgroups-mode exit?
    (setq wg-emacs-exit-save-behavior           'save)
    (setq wg-workgroups-mode-exit-save-behavior 'save)

    ;; Mode Line Changes
    ;; Display workgroups in Mode Line?
    (setq wg-mode-line-display-on t)
    (setq wg-flag-modified t)
    (setq wg-mode-line-decor-left-brace "["
          wg-mode-line-decor-right-brace "]"
          wg-mode-line-decor-divider ":")
    (workgroups-mode 1))
#+end_src
** Hippie Expand
hippe-expand is a better version of dabbrev-expand while dabbrev-expand searches for words you already types in current buffers and other buffers,
hippie-expand includes more sources such as filenames, kill ring…
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand) ;; replace dabbrev-expand
(setq
 hippie-expand-try-functions-list
 '(try-expand-dabbrev ;; Try to expand word "dynamically", searching the current buffer.
   try-expand-dabbrev-all-buffers ;; Try to expand word "dynamically", searching all other buffers.
   try-expand-dabbrev-from-kill ;; Try to expand word "dynamically", searching the kill ring.
   try-complete-file-name-partially ;; Try to complete text as a file name, as many characters as unique.
   try-complete-file-name ;; Try to complete text as a file name.
   try-expand-all-abbrevs ;; Try to expand word before point according to all abbrev tables.
   try-expand-list ;; Try to complete the current line to an entire line in the buffer.
   try-expand-line ;; Try to complete the current line to an entire line in the buffer.
   try-complete-lisp-symbol-partially ;; Try to complete as an Emacs Lisp symbol, as many characters as unique.
   try-complete-lisp-symbol) ;; Try to complete word as an Emacs Lisp symbol.
 )
#+end_src
** Auto Complete
#+begin_src emacs-lisp
(use-package auto-complete
:config
(require 'auto-complete-config)
(ac-config-default)
(setq ac-show-menu-immediately-on-auto-complete t))
#+end_src
** Expand Region
#+begin_src emacs-lisp
(use-package expand-region
:config
(require 'expand-region)
(global-set-key (kbd "M-m") 'er/expand-region))
#+end_src
** Bookmarks Manager
#+begin_src emacs-lisp
(use-package bm
  :bind (("C-c =" . bm-toggle)
         ("C-c [" . bm-previous)
         ("C-c ]" . bm-next)))
#+end_src
** Windows Management
#+begin_src emacs-lisp
(use-package ace-window
:init
(progn
(setq aw-scope 'frame)
(global-set-key (kbd "C-x O") 'other-frame)
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  ))

(use-package ace-jump-mode
  :config
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+end_src
** Indent Whole Buffer
#+begin_src emacs-lisp
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(global-set-key (kbd "C-c n") 'iwb)
#+end_src
** Command Log Mode
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
** Zygospore

zygospore lets you revert C-x 1 (delete-other-window) by pressing C-x 1 again
[[https://github.com/LouisKottmann/zygospore.el/raw/master/demo.gif]]
#+begin_src emacs-lisp
(use-package zygospore
  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
         ("RET" .   newline-and-indent)))
#+end_src

** Origami
#+begin_src emacs-lisp
(use-package origami
:ensure t
:config
(require 'origami)
(add-hook 'prog-mode-hook 'origami-mode)
(define-key origami-mode-map (kbd "C-c f") 'origami-recursively-toggle-node)
(define-key origami-mode-map (kbd "C-c F") 'origami-toggle-all-nodes))
#+end_src
** Duplicate Thing
#+begin_src emacs-lisp
(use-package duplicate-thing
:ensure t
:config
(require 'duplicate-thing)
(global-set-key (kbd "M-c") 'duplicate-thing))
#+end_src
** Smartparens
#+begin_src emacs-lisp
(use-package smartparens-config
:ensure smartparens
:config
(progn
(show-smartparens-global-mode t)))

(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
;(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
(bind-keys
 :map smartparens-mode-map
 ("C-M-a" . sp-beginning-of-sexp)
 ("C-M-e" . sp-end-of-sexp)

 ("C-<down>" . sp-down-sexp)
 ("C-<up>"   . sp-up-sexp)
 ("M-<down>" . sp-backward-down-sexp)
 ("M-<up>"   . sp-backward-up-sexp)

 ("C-M-f" . sp-forward-sexp)
 ("C-M-b" . sp-backward-sexp)

 ("C-M-n" . sp-next-sexp)
 ("C-M-p" . sp-previous-sexp)

 ("C-S-f" . sp-forward-symbol)
 ("C-S-b" . sp-backward-symbol)

 ("C-<right>" . sp-forward-slurp-sexp)
 ("M-<right>" . sp-forward-barf-sexp)
 ("C-<left>"  . sp-backward-slurp-sexp)
 ("M-<left>"  . sp-backward-barf-sexp)

 ("C-M-t" . sp-transpose-sexp)
 ("C-M-k" . sp-kill-sexp)
 ("C-k"   . sp-kill-hybrid-sexp)
 ("M-k"   . sp-backward-kill-sexp)
 ("C-M-w" . sp-copy-sexp)
 ("C-M-d" . delete-sexp)

 ("M-<backspace>" . backward-kill-word)
 ("C-<backspace>" . sp-backward-kill-word)
 ([remap sp-backward-kill-word] . backward-kill-word)

 ("M-[" . sp-backward-unwrap-sexp)
 ("M-]" . sp-unwrap-sexp)

 ("C-x C-t" . sp-transpose-hybrid-sexp)

 ("C-c ("  . wrap-with-parens)
 ("C-c ["  . wrap-with-brackets)
 ("C-c {"  . wrap-with-braces)
 ("C-c M-'"  . wrap-with-single-quotes)
 ("C-c \"" . wrap-with-double-quotes)
 ("C-c _"  . wrap-with-underscores)
 ("C-c `"  . wrap-with-back-quotes))
#+end_src
** Which Mode
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :defer 10
    :diminish which-key-mode
    :config

    ;; Replacements for how KEY is replaced when which-key displays
    ;;   KEY → FUNCTION
    ;; Eg: After "C-c", display "right → winner-redo" as "▶ → winner-redo"
    (setq which-key-key-replacement-alist
          '(("<\\([[:alnum:]-]+\\)>" . "\\1")
            ("left"                  . "◀")
            ("right"                 . "▶")
            ("up"                    . "▲")
            ("down"                  . "▼")
            ("delete"                . "DEL") ; delete key
            ("\\`DEL\\'"             . "BS") ; backspace key
            ("next"                  . "PgDn")
            ("prior"                 . "PgUp"))

          ;; List of "special" keys for which a KEY is displayed as just
          ;; K but with "inverted video" face... not sure I like this.
          which-key-special-keys '("RET" "DEL" ; delete key
                                   "ESC" "BS" ; backspace key
                                   "SPC" "TAB")

          ;; Replacements for how part or whole of FUNCTION is replaced:
          which-key-description-replacement-alist
          '(("Prefix Command" . "prefix")
            ("\\`calc-"       . "") ; Hide "calc-" prefixes when listing M-x calc keys
            ("\\`projectile-" . "𝓟/")
            ("\\`org-babel-"  . "ob/"))

          ;; Underlines commands to emphasize some functions:
          which-key-highlighted-command-list
          '("\\(rectangle-\\)\\|\\(-rectangle\\)"
            "\\`org-"))

    ;; Change what string to display for a given *complete* key binding
    ;; Eg: After "C-x", display "8 → +unicode" instead of "8 → +prefix"
    (which-key-add-key-based-replacements
      "C-x 8"   "unicode"
      "C-c T"   "toggles-"
      "C-c p s" "projectile-search"
      "C-c p 4" "projectile-other-buffer-"
      "C-x a"   "abbrev/expand"
      "C-x r"   "rect/reg"
      "C-c /"   "engine-mode-map"
      "C-c C-v" "org-babel")

    (which-key-mode 1))
#+end_src
** Undo Tree

undo-tree allows you to visual the whole history of your editing in a tree. 
It also provides regular undo/redo behaviours in other editors. 
undo-tree can even provide a diff between two different states. 
Highly recommended.

[[https://camo.githubusercontent.com/85240e7df44ee70d29d68187e15d7a8a37291c4a/68747470733a2f2f747568646f2e6769746875622e696f2f7374617469632f70617274332f756e646f2d747265652e6a7067]]

#+begin_src emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode 1)
    :config
    (defalias 'redo 'undo-tree-redo)
    (require 'undo-tree)
    :bind (("C-z" . undo)
           ("C-S-z" . redo)))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
  :ensure t
  :config
  (require 'yasnippet)
  (yas-global-mode 1)
  (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets"))
#+end_src
** Vimish Fold
#+begin_src emacs-lisp
(use-package vimish-fold)
(require 'vimish-fold)
(vimish-fold-global-mode -1)
;; this registers a region for future folding/unfolding
(global-set-key (kbd "C-c v") #'vimish-fold)
;; this unregisters the region under point from folding/unfolding
(global-set-key (kbd "C-c d") #'vimish-fold-delete)
;; this is the actual fold/unfold command
(global-set-key (kbd "C-c t") #'vimish-fold-toggle)
#+end_src
** Multiple Cursors
#+begin_src emacs-lisp 
  (use-package multiple-cursors
    :config
    (require 'multiple-cursors)
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src

** Magit
#+begin_src emacs-lisp
(use-package magit
  :commands magit-status magit-blame
  :init
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  :config
  (setq vc-follow-symlinks nil
        magit-push-always-verify nil
        magit-restore-window-configuration t)
  :bind ("C-x g" . magit-status))
#+end_src
** Helm
#+begin_src emacs-lisp
    (use-package helm
    :diminish helm-mode
    ;; :init
    ;; (setq helm-idle-delay 0.0
    ;;       helm-input-idle-delay 0.01
    ;;       helm-yas-display-key-on-candidate t
    ;;       helm-quick-update t
    ;;       helm-M-x-requires-pattern nil
    ;;       helm-ff-skip-boring-files t)
    ;; (helm-mode)
    :ensure t)

    (require 'helm)
    (require 'helm-config)

    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs
    ;; Change to "C-c h"
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    ; rebind tab to run persistent action
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    ; make TAB work in terminal
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    ; list actions using C-z
    (define-key helm-map (kbd "C-z")  'helm-select-action)

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-split-window-in-side-p       t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

    (defun spacemacs//helm-hide-minibuffer-maybe ()
      "Hide minibuffer in Helm session if we use the header line as input field."
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

    (add-hook 'helm-minibuffer-set-up-hook
              'spacemacs//helm-hide-minibuffer-maybe)

    (defun pl/helm-alive-p ()
      (if (boundp 'helm-alive-p)
          (symbol-value 'helm-alive-p)))

  ;  (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)

    (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
    (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t)
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (helm-mode 1)

    (when (executable-find "ack-grep")
      (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
            helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
    (setq helm-locate-fuzzy-match t)
    (setq helm-apropos-fuzzy-match t)
#+end_src

helm-descbinds
#+begin_src emacs-lisp
(use-package helm-descbinds
  :defer t
  :bind(
        ("C-h b" . helm-descbinds)
        ("C-h w" . helm-descbinds)))
#+end_src

Helm Projectile
#+begin_src emacs-lisp
(use-package helm-projectile)
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+end_src
** Projectile                                                        :Drill:

- jump to a file in project
- jump to a directory in a project
- jump to file in a dir
- jump to a project buffer
- jump to a test in project
- toggle between code and its test
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- multi-occur in project buffers
- grep in project
- regenerate project etags or gtags
- visit project in dired
- run make in a project with a single key chord
- check for dirty repos

Some Helpful Commands
C-c p s Switch to project
C-c p f List files in project
C-c p k Kill all buffers for project

#+begin_src emacs-lisp
(use-package projectile
:config
(projectile-global-mode))
#+end_src
** Hydra
#+begin_src emacs-lisp
(use-package hydra)
#+end_src
* Editing
** Encoding System                                                   :Drill:
#+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-language-environment "UTF-8")
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+end_src
** Linum Mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
** Delete Selection Mode

#+BEGIN_SRC emacs-lisp
(delete-selection-mode)
#+END_SRC
** Newline and Indent
#+begin_src emacs-lisp
(global-set-key (kbd "RET") 'newline-and-indent)
#+end_src
** Highlight Indentation
#+begin_src emacs-lisp
(use-package highlight-indentation)
(require 'highlight-indentation)
(add-hook 'prog-mode-hook 'highlight-indentation-mode)
(add-hook 'prog-mode-hook 'highlight-indentation-current-column-mode)
(set-face-background 'highlight-indentation-face "#616161")
(set-face-background 'highlight-indentation-current-column-face "#607D8B")
#+end_src
** Code Block Folding
#+BEGIN_SRC emacs-lisp
(use-package hideshow
    :ensure t
    :bind (("C->" . my-toggle-hideshow-all)
           ("C-<" . hs-hide-level)
           ("C-;" . hs-toggle-hiding))
    :config
    ;; Hide the comments too when you do a 'hs-hide-all'
    (setq hs-hide-comments nil)
    ;; Set whether isearch opens folded comments, code, or both
    ;; where x is code, comments, t (both), or nil (neither)
    (setq hs-isearch-open 'x)
    ;; Add more here


    (setq hs-set-up-overlay
          (defun my-display-code-line-counts (ov)
            (when (eq 'code (overlay-get ov 'hs))
              (overlay-put ov 'display
                           (propertize
                            (format " ... <%d>"
                                    (count-lines (overlay-start ov)
                                                 (overlay-end ov)))
                            'face 'font-lock-type-face)))))

    (defvar my-hs-hide nil "Current state of hideshow for toggling all.")
         ;;;###autoload
    (defun my-toggle-hideshow-all () "Toggle hideshow all."
           (interactive)
           (setq my-hs-hide (not my-hs-hide))
           (if my-hs-hide
               (hs-hide-all)
             (hs-show-all)))

    (add-hook 'prog-mode-hook (lambda ()
                                (hs-minor-mode 1)
                                ))
    (add-hook 'clojure-mode-hook (lambda ()
                                (hs-minor-mode 1)
                                ))
    )
#+END_SRC
* Key Bindings
** Frequent Files Shortcut
#+BEGIN_SRC emacs-lisp
  ;; main config file
  (global-set-key
   (kbd "\e\ec")
   (lambda()
     (interactive)
     (find-file "~/.emacs.d/README.org")))

  ;; main index file
  (global-set-key
   (kbd "\e\ei")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/index.org")))


  ;; reference for future use
  (global-set-key
   (kbd "\e\er")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/reference.org")))

  ;; tickler.org
  (global-set-key
   (kbd "\e\et")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/tickler.org")))

  ;; someday.org
  (global-set-key
   (kbd "\e\es")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/someday.org")))

  ;; projects.org
  (global-set-key
   (kbd "\e\ep")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/projects.org")))

  ;; waiting.org
  (global-set-key
   (kbd "\e\ew")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/waiting.org")))

  ;; now.org
  (global-set-key
   (kbd "\e\en")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/now.org")))

  ;; links
  (global-set-key
   (kbd "\e\el")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/links.org")))

  ;; finance
  (global-set-key
   (kbd "\e\ef")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/finance.org")))

  ;; appointments meetings
  (global-set-key
   (kbd "\e\eg")
   (lambda()
     (interactive)
     (find-file "~/Dropbox/org/gcal.org")))

  ;; ends here
#+END_SRC
** Kill This Buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src
* Org Mode
** Global Settings

setting org mode for all .org, .org_archive and text files
#+begin_src emacs-lisp
  (add-to-list
   'auto-mode-alist
   '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

  (require 'org)
#+end_src

the four commands =org-store-link=, =org-capture=, =org-agenda=, =org-iswitchb=
should be accessible through global keys.
#+begin_src emacs-lisp
(global-set-key "\C-cb" 'org-iswitchb)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cc" 'org-capture)
#+end_src

Files with the =.org= extension use Org Mode By Default.
To turn on org mode in a file that does not have the extension =.org=,
make the first line of a file look like this:
#+begin_example
MY PROJECTS -*- mode: org; -*-
#+end_example
which will select Org mode for this buffer no matter what the file’s name is.

#+begin_src emacs-lisp
  (setq
   org-directory "~/Dropbox/org"
   org-default-notes-file (concat org-directory "/notes.org")
   org-export-html-postamble nil
   org-hide-leading-stars t
   org-startup-folded (quote overview)
   org-startup-indented t
   )
#+end_src

custom key bindings
##+begin_src emacs-lisp
  (global-set-key (kbd "<f12>") 'org-agenda)
  (global-set-key (kbd "<f5>") 'bh/org-todo)
  (global-set-key (kbd "<S-f5>") 'bh/widen)
  (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
  (global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
  (global-set-key (kbd "<f9> b") 'bbdb)
  (global-set-key (kbd "<f9> c") 'calendar)
  (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
  (global-set-key (kbd "<f9> g") 'gnus)
  (global-set-key (kbd "<f9> h") 'bh/hide-other)
  (global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)

  (global-set-key (kbd "<f9> I") 'bh/punch-in)
  (global-set-key (kbd "<f9> O") 'bh/punch-out)

  (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

  (global-set-key (kbd "<f9> r") 'boxquote-region)
  (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

  (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
  (global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

  (global-set-key (kbd "<f9> v") 'visible-mode)
  (global-set-key (kbd "<f9> l") 'org-toggle-link-display)
  (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
  (global-set-key (kbd "C-<f9>") 'previous-buffer)
  (global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
  (global-set-key (kbd "C-x n r") 'narrow-to-region)
  (global-set-key (kbd "C-<f10>") 'next-buffer)
  (global-set-key (kbd "<f11>") 'org-clock-goto)
  (global-set-key (kbd "C-<f11>") 'org-clock-in)
  (global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
  (global-set-key (kbd "C-c c") 'org-capture)

  (defun bh/hide-other ()
    (interactive)
    (save-excursion
      (org-back-to-heading 'invisible-ok)
      (hide-other)
      (org-cycle)
      (org-cycle)
      (org-cycle)))

  (defun bh/set-truncate-lines ()
    "Toggle value of truncate-lines and refresh window display."
    (interactive)
    (setq truncate-lines (not truncate-lines))
    ;; Now refresh window display (an idiom from simple.el):
    (save-excursion
      (set-window-start (selected-window)
                        (window-start (selected-window)))))

  (defun bh/make-org-scratch ()
    (interactive)
    (find-file "/tmp/publish/scratch.org")
    (gnus-make-directory "/tmp/publish"))

  (defun bh/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
#+end_src
** Org Todo Keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))

  (setq org-log-done 'time)
  (setq org-log-done 'note)

(defun org-summary-todo (n-done n-not-done)
  "Switch entry to DONE when all subentries are done, to TODO otherwise."
  (let (org-log-done org-log-states)   ; turn off logging
    (org-todo (if (= n-not-done 0) "DONE" "TODO"))))

(add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

#+end_src
** Code Block Shortcuts
ref: sacha
#+BEGIN_SRC emacs-lisp
(setq org-structure-template-alist
      '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
        ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
        ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
        ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
        ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
        ("p" "#+begin_src python\n?\n#+end_src" "<src lang=\"python\">\n?\n</src>")
        ("c" "#+begin_src cpp\n?\n#+end_src" "<src lang=\"cpp\">\n?\n</src>")
        ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
        ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
        ("H" "#+html: " "<literal style=\"html\">?</literal>")
        ("a" "#+begin_ascii\n?\n#+end_ascii")
        ("A" "#+ascii: ")
        ("i" "#+index: ?" "#+index: ?")
        ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC
** Htmlize
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src
** Reveal.JS
#+begin_src emacs-lisp
(use-package ox-reveal)
(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+end_src
** Org Agenda
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("c" "Simple agenda view" ((agenda "") (alltodo "")))))

  (setq org-agenda-files
        (list "~/Dropbox/org"))

  ;; Do not  dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)

  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
#+end_src
** Org AC : Auto Complete Org Mode
#+begin_src emacs-lisp
(use-package org-ac
      :init (progn
              (require 'org-ac)
              (org-ac/config-default)
              ))
#+end_src
** Org Capture
#+begin_src emacs-lisp
  (setq
   org-capture-templates
   '(
     ("a" "Appointment" entry (file  "~/Dropbox/org/gcal.org" )
     "* %?\n%^T")
     ("c" "Capture" entry (file  "~/Dropbox/org/index.org" )
     "* %?\n%U\n%a")
     ("j" "Journal" entry (file+headline "~/Dropbox/org/reference.org" "Journal")
      "* %t\n** Day\n*** What am I Grateful For:\n1. %?\n2. \n3. \n*** What Would Make Today Great:\n1. \n2. \n3. \n*** Daily Affirmations I am:\n1. \n2. \n3. \n\n** Night\n*** 3 Amazing Things Happened Today:\n1. \n2. \n3. \n*** How could I Make Things Better\n1. \n2. \n3. \n" :prepend t)
     ("l" "Link" entry (file "~/Dropbox/org/links.org")
      "* %?%^L %^G \n%U" :prepend t)
     ("t" "Todo" entry (file+headline "~/Dropbox/org/index.org" "Tasks")
      "* TODO [#A] %^{GOAL} %^G\nSCHEDULED: %^{SCHEDULED}T\nDEADLINE: %^{DEADLINE}T\n%a" :prepend t :clock-in t :clock-resume t)
     ("o" "One Things" entry (file+headline "~/Dropbox/org/reference.org" "One Things")
      "* TODO [#A] %^{GOAL} %^G\nSCHEDULED: %^{SCHEDULED}t\nDEADLINE: %^{DEADLINE}t" :prepend t)
     ("n" "Notes" entry (file+headline "~/Dropbox/org/reference.org" "Notes")
      "* %?\n%U\n%a")
     ("b" "Business Ideas" entry (file+headline "~/Dropbox/org/reference.org" "Business Ideas")
      "* %^{one_word} %^G\nDescription: %^{Description}\nNotes: %?\n%U\n")
      ("m" "Meeting" entry (file+headline "~/Dropbox/org/index.org" "Meeting")
      "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
      ("p" "Phone call" entry (file+headline  "~/Dropbox/org/index.org" "Phone Calls")
      "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
      ("h" "Habit" entry (file+headline "~/Dropbox/org/index.org" "Habit")
      "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")   
      ))
#+end_src
** Org Refile
#+begin_src emacs-lisp
    (setq org-refile-targets
          '(
            ("~/Dropbox/org/reference.org" :level . 1)
            ("~/Dropbox/org/someday.org" :level . 1)
            ("~/Dropbox/org/tickler.org" :level . 1)
            ("~/Dropbox/org/project.org" :level . 1)
            ("~/Dropbox/org/now.org" :level . 1)
            ("~/Dropbox/org/waiting.org" :level . 1)
            ))
#+end_src
** Set Default Browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")
#+end_src
** Open Pdf in Evince
#+begin_src emacs-lisp
(setq org-file-apps
      (append '(
                ("\\.pdf\\'" . "evince %s")
                ) org-file-apps ))
#+end_src
** Org Bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook
            (lambda () (org-bullets-mode 1))))
#+end_src
** Literate Programming
don't create a new window each time
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src
use C-x C-s for closing out of the org-src-edit buffer
#+begin_src emacs-lisp
  (eval-after-load 'org-src
    '(define-key org-src-mode-map
       (kbd "C-x C-s") #'org-edit-src-exit))
#+end_src
** Org Gcal
#+begin_src emacs-lisp
(setq package-check-signature nil)

(use-package org-gcal
  :ensure t
  :config
  (setq org-gcal-client-id org_gcal_client_id
	org-gcal-client-secret org_gcal_client_secret
	org-gcal-file-alist '(("alamin.ineedahelp@gmail.com" .  "~/Dropbox/org/gcal.org"))))

(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
#+end_src 
** Org Indent
#+BEGIN_SRC emacs-lisp
   (eval-after-load "org-indent" '(diminish 'org-indent-mode))
#+END_SRC
* Programming
** General Settings
*** Paredit
[[http://danmidwood.com/content/2014/11/21/animated-paredit.html][Dan Midwood]] has a great guide to using
paredit.
#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :ensure t
    :diminish paredit-mode
    :config
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    :bind (("C-c d" . paredit-forward-down))
    )

  ;; Ensure paredit is used EVERYWHERE!
  (use-package paredit-everywhere
    :ensure t
    :diminish paredit-everywhere-mode
    :config
    (add-hook 'prog-mode-hook #'paredit-everywhere-mode))

  (use-package highlight-parentheses
    :ensure t
    :diminish highlight-parentheses-mode
    :config
    (add-hook 'emacs-lisp-mode-hook
              (lambda()
                (highlight-parentheses-mode)
                )))

  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'lisp-mode-hook
              (lambda()
                (rainbow-delimiters-mode)
                )))

  (global-highlight-parentheses-mode)
#+END_SRC
** Emacs Lisp
*** ert
*** apropos
*** Key-bindings
#+begin_src emacs-lisp
  ;; (bind-key "C-c e b" 'do-eval-buffer)
  ;; (bind-key "C-c e e" 'toggle-debug-on-error)
  ;; (bind-key "C-c e f" 'emacs-lisp-byte-compile-and-load)
  ;; (bind-key "C-c e r" 'eval-region)
  ;; (bind-key "C-c e s" 'scratch)

  ;; (bind-key "C-h e" 'lisp-find-map)
  ;; (bind-key "C-h e e" 'view-echo-area-messages)
  ;; (bind-key "C-h e f" 'find-function)
  ;; (bind-key "C-h e k" 'find-function-on-key)
  ;; (bind-key "C-h e l" 'find-library)
  ;; (bind-key "C-h e v" 'find-variable)
  ;; (bind-key "C-h e V" 'apropos-value)
#+end_src
*** eval-expr
*** macrostep
** Python

IDE Features I will Need
- easily find files and switch between projects
- easy navigating through function definition
- contexual documentation
- inline help for function calls

Ref: [[https://youtu.be/6BlTGPsjGJk]]

Required packages
- projectile 
- auto-complete
- epc
- jedi

*** init
#+begin_src emacs-lisp
(add-hook 'python-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil)
            (setq tab-width 4)
            (setq python-indent-offset 4)))

;(setq py-python-command "python3")
(setq python-shell-interpreter "ipython3" python-shell-interpreter-args "--simple-prompt --pprint")

; use the wx backend, for both mayavi and matplotlib
;(setq py-python-command-args
;  '("--gui=wx" "--pylab=wx" "-colors" "Linux"))
;(setq py-force-py-shell-name-p t)

; switch to the interpreter after executing code
(setq py-shell-switch-buffers-on-execute-p t)
(setq py-switch-buffers-on-execute-p t)
; don't split windows
(setq py-split-windows-on-execute-p nil)
; try to automagically figure out indentation
(setq py-smart-indentation t)
#+end_src
#+begin_src bash
#sudo apt install -y python3-rope \
#                   python3-isort
#sudo pip3 install flake8 jedi autopep8 yapf importmagic
#+end_src
*** virtualenvwrapper
#+begin_src emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell))
#+end_src
*** elpy
#+begin_src emacs-lisp
  (use-package elpy
  :ensure t
  :config
  (elpy-enable)
  (setq elpy-rpc-python-command "python3"))
#+end_src
*** flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode t))
#+end_src
*** py-autopep8
#+begin_src emacs-lisp
(use-package py-autopep8
:ensure t
:config
(require 'py-autopep8)
(add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+end_src

*** epc
#+begin_src emacs-lisp
(use-package epc)
#+end_src
*** jedi 
#+begin_src emacs-lisp
  (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))
#+end_src
** Latex
#+begin_src emacs-lis
;; latex
(use-package tex
:ensure auctex)

(defun tex-view ()
    (interactive)
    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))
#+end_src
** Erlang                                                            :drill:
ref: purcell
#+begin_src emacs-lisp
  (use-package erlang
    :config
    (require 'erlang-start))
#+end_src
** JavaScript
ref: purcell
#+begin_src emacs-lisp

#+end_src
* Applications
** Email
** Chat
** Docker
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+end_src
* Blogging
* Writing
* Todo List [0%]
- [ ] Highlight and Narrowing [Howard]
- [ ] Org-Present
- [ ] Chatting
- [ ] Emailing
- [ ] A Secure Emacs Environment [Build Fun Things]
- [ ] Code Folding 
