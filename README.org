#+TITLE: Alamin's Emacs Configuration
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com
#+STARTUP: overview indent inlineimages hideblocks

* Introduction

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Md. Alamin Mahamud")
(setq user-email-address "alamin.ineedahelp@gmail.com")
#+END_SRC


* General Settings
** Maximum Workspace

 #+BEGIN_SRC emacs-lisp
 (if (fboundp 'menu-bar-mode)(menu-bar-mode -1))
 (if (fboundp 'tool-bar-mode)(tool-bar-mode -1))
 (if (fboundp 'scroll-bar-mode)(scroll-bar-mode -1))

 (setq inhibit-startup-message t)
 #+END_SRC

** Default Settings

#+BEGIN_SRC emacs-lisp
  ;; Show keystrokes in progress
  (setq echo-keystrokes 0.1)

  ;; fringe-style
  (fringe-mode '(0 . 0))

  ;; Answering just 'y' or 'n' will do
  (defalias 'yes-or-no-p 'y-or-n-p)


  (if (display-graphic-p)
      (setq linum-format "%2d ")
    (setq linum-format "%2d \u2502 "))
#+END_SRC

** Emacs Server
#+BEGIN_EXPORT emacs-lisp
(require 'server)
(unless (server-running-p)
  (server-start))
#+END_EXPORT


** Custom Settings File
#+BEGIN_SRC emacs-lisp
(setq custom-file
      (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)
#+END_SRC


** Load Secrets
#+BEGIN_SRC emacs-lisp
(load "~/.emacs.d/.secrets")
#+END_SRC

* Appearnace
** Scratch Buffer

#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message (concat ";; One Brick A Day, " user-login-name " - Emacs â™¥ you!\n\n"))
#+END_SRC

** Fonts
#+BEGIN_SRC emacs-lisp
(setq magnars/default-font "MonacoB-11")
(set-face-attribute 'default nil :font magnars/default-font)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (setq custom-theme-directory (concat user-emacs-directory "themes"))

  (dolist
      (path (directory-files custom-theme-directory t "\\w+"))
    (when (file-directory-p path)
      (add-to-list 'custom-theme-load-path path)))

  (defun use-default-theme ()
    (interactive)
    (load-theme 'default-black)
    (when (boundp 'magnars/default-font)
      (set-face-attribute 'default nil :font magnars/default-font)))

  (if (display-graphic-p)
      (use-default-theme))
#+END_SRC
* Package Initialization

#+BEGIN_SRC emacs-lisp
(require 'package)
(setq package-archives nil)
(setq package-archives
      '(
        ("org"       . "https://orgmode.org/elpa/")
        ("gnu"       . "http://elpa.gnu.org/packages/")
        ("melpa"     . "http://melpa.org/packages/")
        ("marmalade" . "http://marmalade-repo.org/packages/")))

(package-initialize)
(unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa")
             (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable")
             (file-exists-p "~/.emacs.d/elpa/archives/marmalade")
             )
  (package-refresh-contents))

;; use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(setq use-package-verbose t)
(setq use-package-always-ensure t)
(require 'use-package)
#+END_SRC

* Packages
** ace-window ace-jump-mode
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :init
  (progn
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x O") `'other-frame)
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))))


  (use-package ace-jump-mode
    :config
    (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+END_SRC
** duplicate-thing
#+BEGIN_SRC emacs-lisp
(use-package duplicate-thing
:ensure t
:config
(require 'duplicate-thing)
(global-set-key (kbd "M-c") 'duplicate-thing))
#+END_SRC
** editorconfig
#+BEGIN_SRC emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (require 'expand-region)
  (global-set-key (kbd "M-m") 'er/expand-region))
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :diminish flycheck-mode
    :config
    (global-flycheck-mode))
  
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Helm
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (use-package helm
    :config
    (require 'helm-config)
    (require 'helm-grep)

    (defun helm-hide-minibuffer-maybe ()
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face (let ((bg-color (face-background 'default nil)))
                                  `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))
    (add-hook 'helm-minibuffer-set-up-hook 'helm-hide-minibuffer-maybe)
    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
    ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
    ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))

    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
    (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

    (define-key helm-grep-mode-map (kbd "<return>")  'helm-grep-mode-jump-other-window)
    (define-key helm-grep-mode-map (kbd "n")  'helm-grep-mode-jump-other-window-forward)
    (define-key helm-grep-mode-map (kbd "p")  'helm-grep-mode-jump-other-window-backward)

  (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      (setq helm-google-suggest-use-curl-p t
            helm-scroll-amount 4 ; scroll 4 lines other window using M-<next>/M-<prior>
            ;; helm-quick-update t ; do not display invisible candidates
            helm-ff-search-library-in-sexp t ; search for library in `require' and `declare-function' sexp.

            ;; you can customize helm-do-grep to execute ack-grep
            ;; helm-grep-default-command "ack-grep -Hn --smart-case --no-group --no-color %e %p %f"
            ;; helm-grep-default-recurse-command "ack-grep -H --smart-case --no-group --no-color %e %p %f"
            helm-split-window-in-side-p t ;; open helm buffer inside current window, not occupy whole other window

            helm-echo-input-in-header-line t

            ;; helm-candidate-number-limit 500 ; limit the number of displayed canidates
            helm-ff-file-name-history-use-recentf t
            helm-move-to-line-cycle-in-source t ; move to end or beginning of source when reaching top or bottom of source.
            helm-buffer-skip-remote-checking t

            helm-mode-fuzzy-match t

            helm-buffers-fuzzy-matching t ; fuzzy matching buffer names when non-nil
                                          ; useful in helm-mini that lists buffers
            helm-org-headings-fontify t
            ;; helm-find-files-sort-directories t
            ;; ido-use-virtual-buffers t
            helm-semantic-fuzzy-match t
            helm-M-x-fuzzy-match t
            helm-imenu-fuzzy-match t
            helm-lisp-fuzzy-completion t
            ;; helm-apropos-fuzzy-match t
            helm-buffer-skip-remote-checking t
            helm-locate-fuzzy-match t
            helm-display-header-line nil)
      (add-to-list 'helm-sources-using-default-as-input 'helm-source-man-pages)

      (global-set-key (kbd "M-x") 'helm-M-x)
      (global-set-key (kbd "M-y") 'helm-show-kill-ring)
      (global-set-key (kbd "C-x b") 'helm-buffers-list)
      (global-set-key (kbd "C-x C-f") 'helm-find-files)
      (global-set-key (kbd "C-c r") 'helm-recentf)
      (global-set-key (kbd "C-h SPC") 'helm-all-mark-rings)
      (global-set-key (kbd "C-c h o") 'helm-occur))

      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; PACKAGE: helm-swoop                ;;
      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;; Locate the helm-swoop folder to your path
      (use-package helm-swoop
        :bind (("C-c h o" . helm-swoop)
               ("C-c h s" . helm-multi-swoop-all))
        :config
        ;; When doing isearch, hand the word over to helm-swoop
        (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)

        ;; From helm-swoop to helm-multi-swoop-all
        (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)

        ;; Save buffer when helm-multi-swoop-edit complete
        (setq helm-multi-swoop-edit-save t)

        ;; If this value is t, split window inside the current window
        (setq helm-swoop-split-with-multiple-windows t)

        ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
        (setq helm-swoop-split-direction 'split-window-vertically)

        ;; If nil, you can slightly boost invoke speed in exchange for text color
        (setq helm-swoop-speed-or-color t))

  (helm-mode 1)
#+END_SRC
** highlight-indent-guides
#+BEGIN_SRC emacs-lisp
(use-package highlight-indent-guides)
(setq highlight-indent-guides-method 'character)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(add-hook 'yaml-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-character ?\|)
#+END_SRC
** magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :commands magit-status magit-blame
  :init
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  :config
  (setq vc-follow-symlinks nil
        magit-push-always-verify nil
        magit-restore-window-configuration t)
  :bind ("C-x g" . magit-status))
#+END_SRC

** org-mode
#+BEGIN_SRC emacs-lisp
;; Code-Block shortcuts
(setq
 org-structure-template-alist
 '(
   ("s" "#+BEGIN_SRC shell\n\n#+END_SRC" "<src lang=\"shell\">\n\n</src>")
   ("sq" "#+BEGIN_SRC sql\n\n#+END_SRC" "<src lang=\"sql\">\n\n</src>")
   ("e" "#+BEGIN_EXAMPLE\n?\n#+END_EXAMPLE" "<example>\n?\n</example>")
   ("q" "#+BEGIN_QUOTE\n?\n#+END_QUOTE" "<quote>\n?\n</quote>")
   ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
   ("c" "#+BEGIN_SRC cpp\n?\n#+END_SRC" "<src lang=\"cpp\">\n?\n</src>")
   ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
   ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
   ("H" "#+html: " "<literal style=\"html\">?</literal>")
   ("a" "#+begin_ascii\n?\n#+end_ascii")
   ("A" "#+ascii: ")
   ("i" "#+index: ?" "#+index: ?")
   ("I" "#+include %file ?" "<include file=%file markup=\"?\">")
   ("l" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC" "<src lang=\"emacs-lisp\">\n?\n</src>")
   ("py" "#+BEGIN_SRC python\n?\n#+END_SRC" "<src lang=\"python\">\n?\n</src>")
   ("ph" "#+BEGIN_SRC php\n?\n#+END_SRC" "<src lang=\"php\">\n?\n</src>")
   )
 )
#+END_SRC

org-babel execute functions
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (shell  . t)
   (js     . t)))

(setq org-confirm-babel-evaluate nil)
#+END_SRC


** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :config
  (require 'projectile)
  (projectile-global-mode))
#+END_SRC

*** helm-projectile
#+BEGIN_SRC emacs-lisp
(use-package helm-projectile
  :init
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (setq projectile-switch-project-action 'helm-projectile)
  (setq projectile-enable-caching t)
  (setq projectile-indexing-method 'alien)
  (helm-projectile-on))
#+END_SRC
** undo-tree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :diminish undo-tree-mode
  :init
  (global-undo-tree-mode 1)
  :config
  (defalias 'redo 'undo-tree-redo)
  :bind (("C-z"   . undo)
         ("C-S-z" . redo)))
#+END_SRC

** which key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (require 'which-key)
  (which-key-mode))
#+END_SRC
** whitespace mode
#+BEGIN_SRC emacs-lisp
(use-package whitespace
  :bind ("C-c T w" . whitespace-mode)
  :init
  (setq whitespace-line-column nil
        whitespace-display-mappings '((space-mark 32 [183] [46])
                                      (newline-mark 10 [9166 10])
                                      (tab-mark 9 [9654 9] [92 9])))
  :config
  (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
  (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
  (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
  :diminish whitespace-mode)
#+END_SRC
* Programming
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
** Python

1. file navigation between multiple projects
2. contexual documentation
3. inline help for complex function calls

#+BEGIN_SRC emacs-lisp
  (setq python-shell-interpreter "ipython3"
        python-shell-interpreter-args "--pprint")

  ;; Switch to the interpreter after executing code
  (setq py-shell-switch-buffers-on-execute-p t)
  (setq py-switch-buffers-on-execute-p t)

  ;; don't split windows
  (setq py-split-windows-on-execute-p nil)

  ;; try to automagically figure out indentation
  (setq py-smart-indentation t)

  (use-package elpy)
  (elpy-enable)
#+END_SRC
* Keybindings

** Frequent Files Shortcut
#+BEGIN_SRC emacs-lisp
;; main config file
(global-set-key
 (kbd "\e\ec")
 (lambda()
   (interactive)
   (find-file "~/.emacs.d/README.org")))

;; main index file
(global-set-key
 (kbd "\e\ei")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/index.org")))


;; reference for future use
(global-set-key
 (kbd "\e\er")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/reference.org")))

;; tickler.org
(global-set-key
 (kbd "\e\et")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/tickler.org")))

;; someday.org
(global-set-key
 (kbd "\e\es")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/someday.org")))

;; projects.org
(global-set-key
 (kbd "\e\ep")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/projects.org")))

;; waiting.org
(global-set-key
 (kbd "\e\ew")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/waiting.org")))

;; now.org
(global-set-key
 (kbd "\e\en")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/now.org")))

;; links
(global-set-key
 (kbd "\e\el")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/links.org")))

;; hotlist
(global-set-key
 (kbd "\e\eh")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/hotlist.org")))

;; finance
(global-set-key
 (kbd "\e\ef")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/finance.org")))

;; appointments meetings
(global-set-key
 (kbd "\e\eg")
 (lambda()
   (interactive)
   (find-file "~/Dropbox/org/gcal.org")))

;; i3wm config
(global-set-key
 (kbd "\e\e3")
 (lambda()
   (interactive)
   (find-file "~/.i3/config")))


;; .zshrc
(global-set-key
 (kbd "\e\ez")
 (lambda()
   (interactive)
   (find-file "~/.zshrc")))

;; ends here
#+END_SRC
** Kill this buffer
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+END_SRC
* User Specific Emacs Settings
#+BEGIN_SRC emacs-lisp
;; Settings for currently logged in user
(setq user-settings-dir
      (concat user-emacs-directory "users/" user-login-name))
(add-to-list 'load-path user-settings-dir)

;; Conclude init by setting up specifics for the current user
(when (file-exists-p user-settings-dir)
  (mapc 'load (directory-files user-settings-dir nil "^[^#].*el$")))
#+END_SRC
