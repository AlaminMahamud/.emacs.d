#+TITLE: Alamin's Emacs Configuration
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com

#+STARTUP: overview indent inlineimages
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamp:t
#+LAYOUT: post
#+DESCRIPTION: Loading Emacs Configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* interface
#+BEGIN_SRC emacs-lisp
  (if
      (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))

  (if
      (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))

  (if
      (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

  (setq inhibit-startup-message t)
#+END_SRC

* custom settings
#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* package init
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives nil)
  (setq package-archives
        '(
          ("org"       . "http://orgmode.org/elpa/")
          ("gnu"       . "http://elpa.gnu.org/packages/")
          ("melpa"     . "http://melpa.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))

  (package-initialize)
  (unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable")
               (file-exists-p "~/.emacs.d/elpa/archives/marmalade")
               )
    (package-refresh-contents))

  ;; use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
* elisp enhancement
#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (use-package dash
    :config (eval-after-load "dash" '(dash-enable-font-lock)))

  (use-package s)

  (use-package f)
#+END_SRC
* appearance
** font-lock decoration
#+BEGIN_SRC emacs-lisp
  (setq font-lock-maximum-decoration t
        color-theme-is-global t
        truncate-partial-width-windows nil)
#+END_SRC

** visible-bell disable
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function (lambda ()
                             (invert-face 'mode-line)
                             (run-with-timer 0.05 nil 'invert-face 'mode-line)))
#+END_SRC
** highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** show paren mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** frame-title-format
#+BEGIN_SRC emacs-lisp
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (tooltip-mode -1)
    (blink-cursor-mode -1)
    )
#+END_SRC
** arjen-grey-theme
#+BEGIN_SRC emacs-lisp
  (use-package arjen-grey-theme
    :config
    (load-theme 'arjen-grey t))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired)
  (use-package pretty-mode)
#+END_SRC
** scratch buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message (concat ";; One Brick A Day, " user-login-name " - Emacs â™¥ you!\n\n"))
#+END_SRC
** fonts
#+BEGIN_SRC emacs-lisp
  (if (or (eq system-type 'darwin)(eq system-type 'gnu/linux) )
  ;    (set-face-attribute 'default nil :font "Consolas-14")
  ;    (set-face-attribute 'default nil :font "Inconsolata-14")
       (set-face-attribute 'default nil :font "Monaco-15" :weight 'bold)
  ;    (set-face-attribute 'default nil :font "Hack-16")
  ;    (set-face-attribute 'default nil :font "DejaVu Sans Mono-16")
    (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 110))

  ;; set italic font for italic face, since Emacs does not set italic
  ;; face automatically
  (set-face-attribute 'italic nil
                      :family "Hack-Italic")
#+END_SRC
** highlight numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:config
(add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** highlight symbol
#+BEGIN_SRC emacs-lisp
    (use-package highlight-symbol
    :config

    (require 'highlight-symbol)
    (highlight-symbol-nav-mode)
    (add-hook 'prog-mode-hook
              (lambda() (highlight-symbol-mode)))
    (add-hook 'org-mode-hook (lambda () (highlight-symbol-mode)))
  (setq highlight-symbol-idle-delay 0.2
        highlight-symbol-on-navigation-p t)

  (global-set-key [(control shift mouse-1)]
                  (lambda (event)
                    (interactive "e")
                    (goto-char (posn-point (event-start event)))
                    (highlight-symbol-at-point)))

  (global-set-key (kbd "M-n") 'highlight-symbol-next)
  (global-set-key (kbd "M-p") 'highlight-symbol-prev))
#+END_SRC
** whitespace mode
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :bind ("C-c S-w" . whitespace-mode)
    :init
    (setq whitespace-line-column nil
          whitespace-display-mappings '((space-mark 32 [183] [46])
                                        (newline-mark 10 [9166 10])
                                        (tab-mark 9 [9654 9] [92 9])))
    :config
    (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
    :diminish whitespace-mode)
#+END_SRC
* editing
** linum-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
** delete-selection-mode
#+BEGIN_SRC emacs-lisp

#+END_SRC
* org mode
** code-block shortcuts
ref: sacha
#+BEGIN_SRC emacs-lisp
(setq org-structure-template-alist
      '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
        ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
        ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
        ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
        ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
        ("p" "#+begin_src python\n?\n#+end_src" "<src lang=\"python\">\n?\n</src>")
        ("c" "#+begin_src cpp\n?\n#+end_src" "<src lang=\"cpp\">\n?\n</src>")
        ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
        ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
        ("H" "#+html: " "<literal style=\"html\">?</literal>")
        ("a" "#+begin_ascii\n?\n#+end_ascii")
        ("A" "#+ascii: ")
        ("i" "#+index: ?" "#+index: ?")
        ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC
* frequent file shortcuts
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "\e\ec")
   (lambda()
     (interactive)
     (find-file "~/.emacs.d/README.org")))
#+END_SRC
