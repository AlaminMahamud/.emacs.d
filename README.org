#+TITLE: Alamin's Emacs Configuration
#+AUTHOR: Md. Alamin Mahamud
#+EMAIL: alamin.ineedahelp@gmail.com

#+STARTUP: overview indent inlineimages
#+OPTIONS: H:5 num:nil tags:nil toc:nil timestamp:t
#+LAYOUT: post
#+DESCRIPTION: Loading Emacs Configuration using org-babel
#+TAGS: emacs
#+CATEGORIES: editing

* all bar interfaces
#+BEGIN_SRC emacs-lisp
  (if
      (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))

  (if
      (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))

  (if
      (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))

  (setq inhibit-startup-message t)
#+END_SRC

* global settings
** replace yes wit y
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* custom settings
#+BEGIN_SRC emacs-lisp
  (setq custom-file
        (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* package init
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives nil)
  (setq package-archives
        '(
          ("org"       . "http://orgmode.org/elpa/")
          ("gnu"       . "http://elpa.gnu.org/packages/")
          ("melpa"     . "http://melpa.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")))

  (package-initialize)
  (unless (and (file-exists-p "~/.emacs.d/elpa/archives/gnu")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa")
               (file-exists-p "~/.emacs.d/elpa/archives/melpa-stable")
               (file-exists-p "~/.emacs.d/elpa/archives/marmalade")
               )
    (package-refresh-contents))

  ;; use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t)
  (setq use-package-always-ensure t)
  (require 'use-package)
#+END_SRC
* elisp enhancement
#+BEGIN_SRC emacs-lisp
  (require 'cl)

  (use-package dash
    :config (eval-after-load "dash" '(dash-enable-font-lock)))

  (use-package s)

  (use-package f)
#+END_SRC
* appearance
** font-lock decoration
#+BEGIN_SRC emacs-lisp
  (setq font-lock-maximum-decoration t
        color-theme-is-global t
        truncate-partial-width-windows nil)
#+END_SRC

** visible-bell disable
#+BEGIN_SRC emacs-lisp
  (setq visible-bell nil)
  (setq ring-bell-function (lambda ()
                             (invert-face 'mode-line)
                             (run-with-timer 0.05 nil 'invert-face 'mode-line)))
#+END_SRC
** highlight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC
** show paren mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
** frame-title-format
#+BEGIN_SRC emacs-lisp
  (when window-system
    (setq frame-title-format '(buffer-file-name "%f" ("%b")))
    (tooltip-mode -1)
    (blink-cursor-mode -1)
    )
#+END_SRC
** arjen-grey-theme
#+BEGIN_SRC emacs-lisp
  (use-package arjen-grey-theme
    :config
    (load-theme 'arjen-grey t))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-dired)
  (use-package pretty-mode)
#+END_SRC
** scratch buffer
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message (concat ";; One Brick A Day, " user-login-name " - Emacs ♥ you!\n\n"))
#+END_SRC
** fonts
#+BEGIN_SRC emacs-lisp
  (if (or (eq system-type 'darwin)(eq system-type 'gnu/linux) )
  ;    (set-face-attribute 'default nil :font "Consolas-14")
  ;    (set-face-attribute 'default nil :font "Inconsolata-14")
       (set-face-attribute 'default nil :font "Monaco-15" :weight 'bold)
  ;    (set-face-attribute 'default nil :font "Hack-16")
  ;    (set-face-attribute 'default nil :font "DejaVu Sans Mono-16")
    (set-face-attribute 'default nil :font "DejaVu Sans Mono" :height 110))

  ;; set italic font for italic face, since Emacs does not set italic
  ;; face automatically
  (set-face-attribute 'italic nil
                      :family "Hack-Italic")
#+END_SRC
** highlight numbers
#+BEGIN_SRC emacs-lisp
(use-package highlight-numbers
:config
(add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** highlight symbol
#+BEGIN_SRC emacs-lisp
    (use-package highlight-symbol
    :config

    (require 'highlight-symbol)
    (highlight-symbol-nav-mode)
    (add-hook 'prog-mode-hook
              (lambda() (highlight-symbol-mode)))
    (add-hook 'org-mode-hook (lambda () (highlight-symbol-mode)))
  (setq highlight-symbol-idle-delay 0.2
        highlight-symbol-on-navigation-p t)

  (global-set-key [(control shift mouse-1)]
                  (lambda (event)
                    (interactive "e")
                    (goto-char (posn-point (event-start event)))
                    (highlight-symbol-at-point)))

  (global-set-key (kbd "M-n") 'highlight-symbol-next)
  (global-set-key (kbd "M-p") 'highlight-symbol-prev))
#+END_SRC
** whitespace mode
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :bind ("C-c S-w" . whitespace-mode)
    :init
    (setq whitespace-line-column nil
          whitespace-display-mappings '((space-mark 32 [183] [46])
                                        (newline-mark 10 [9166 10])
                                        (tab-mark 9 [9654 9] [92 9])))
    :config
    (set-face-attribute 'whitespace-space       nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-newline     nil :foreground "#666666" :background nil)
    (set-face-attribute 'whitespace-indentation nil :foreground "#666666" :background nil)
    :diminish whitespace-mode)
#+END_SRC
* editing
** linum-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
#+END_SRC
** delete-selection-mode
#+BEGIN_SRC emacs-lisp

#+END_SRC
* try
#+begin_src emacs-lisp
(use-package try)
#+end_src
* workgroups2
- create your workspace in emacs
- saves all your opened buffers, their locations and sizes on disk to restore later
#+begin_src emacs-lisp
  (use-package workgroups2
  :config
  (require 'workgroups2)

  ;; Change prefix key (before activating WG)
  (setq wg-prefix-key (kbd "C-c z"))
  ;; Change workgroups session file
  (setq wg-session-file "~/.emacs.d/.emacs_workgroups")
  ;; What to do on Emacs exit / workgroups-mode exit?
  (setq wg-emacs-exit-save-behavior           'save)
  (setq wg-workgroups-mode-exit-save-behavior 'save)

  ;; Mode Line Changes
  ;; Display workgroups in Mode Line?
  (setq wg-mode-line-display-on t)
  (setq wg-flag-modified t)
  (setq wg-mode-line-decor-left-brace "["
        wg-mode-line-decor-right-brace "]"
        wg-mode-line-decor-divider ":")
  (workgroups-mode 1))
#+end_src
* hippie expand

hippe-expand is a better version of dabbrev-expand while dabbrev-expand searches for words you already types in current buffers and other buffers, hippie-expand includes more sources such as filenames, kill ring…
#+begin_src emacs-lisp
(global-set-key (kbd "M-/") 'hippie-expand) ;; replace dabbrev-expand
(setq
hippie-expand-try-functions-list
'(try-expand-dabbrev ;; Try to expand word "dynamically", searching the current buffer.
   try-expand-dabbrev-all-buffers ;; Try to expand word "dynamically", searching all other buffers.
   try-expand-dabbrev-from-kill ;; Try to expand word "dynamically", searching the kill ring.
   try-complete-file-name-partially ;; Try to complete text as a file name, as many characters as unique.
   try-complete-file-name ;; Try to complete text as a file name.
   try-expand-all-abbrevs ;; Try to expand word before point according to all abbrev tables.
   try-expand-list ;; Try to complete the current line to an entire line in the buffer.
   try-expand-line ;; Try to complete the current line to an entire line in the buffer.
   try-complete-lisp-symbol-partially ;; Try to complete as an Emacs Lisp symbol, as many characters as unique.
   try-complete-lisp-symbol) ;; Try to complete word as an Emacs Lisp symbol.
)
#+end_src
* kill this buffer
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'kill-this-buffer)
#+end_src
* company mode
#+begin_src emacs-lisp
(use-package company
:config
(add-hook 'after-init-hook 'global-company-mode))
#+end_src
* expand region
#+begin_src emacs-lisp
(use-package expand-region
:config
(require 'expand-region)
(global-set-key (kbd "M-m") 'er/expand-region))
#+end_src
* projectile

- jump to a file in project
- jump to a directory in a project
- jump to file in a dir
- jump to a project buffer
- jump to a test in project
- toggle between code and its test
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- multi-occur in project buffers
- grep in project
- regenerate project etags or gtags
- visit project in dired
- run make in a project with a single key chord
- check for dirty repos
#+begin_src emacs-lisp
(use-package projectile
:config
(projectile-global-mode))
#+end_src
* bm = Bookmarks Manager
#+begin_src emacs-lisp
(use-package bm
  :bind (("C-c =" . bm-toggle)
         ("C-c [" . bm-previous)
         ("C-c ]" . bm-next)))
#+end_src
* windows management :DRILL:
#+begin_src emacs-lisp
(use-package ace-window
:init
(progn
(setq aw-scope 'frame)
(global-set-key (kbd "C-x O") 'other-frame)
  (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l ?o))
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  ))

(use-package ace-jump-mode
  :config
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode))
#+end_src
* indent whole buffer :DRILL:
#+begin_src emacs-lisp
(defun iwb ()
  "indent whole buffer"
  (interactive)
  (delete-trailing-whitespace)
  (indent-region (point-min) (point-max) nil)
  (untabify (point-min) (point-max)))

(global-set-key (kbd "C-c n") 'iwb)
#+end_src
* command log mode :DRILL:
#+begin_src emacs-lisp
(use-package command-log-mode)
#+end_src
* zygospore

zygospore lets you revert C-x 1 (delete-other-window) by pressing C-x 1 again
[[https://github.com/LouisKottmann/zygospore.el/raw/master/demo.gif]]
#+begin_src emacs-lisp
(use-package zygospore
  :bind (("C-x 1" . zygospore-toggle-delete-other-windows)
         ("RET" .   newline-and-indent)))
#+end_src

* ORG
** global settings
#+begin_src emacs-lisp
  (setq
   org-directory "~/Dropbox/org"
   org-default-notes-file (concat org-directory "/notes.org")
   org-export-html-postamble nil
   org-hide-leading-stars t
   org-startup-folded (quote overview)
   org-startup-indented t
   )
#+end_src
** code-block shortcuts
ref: sacha
#+BEGIN_SRC emacs-lisp
(setq org-structure-template-alist
      '(("s" "#+begin_src ?\n\n#+end_src" "<src lang=\"?\">\n\n</src>")
        ("e" "#+begin_example\n?\n#+end_example" "<example>\n?\n</example>")
        ("q" "#+begin_quote\n?\n#+end_quote" "<quote>\n?\n</quote>")
        ("v" "#+BEGIN_VERSE\n?\n#+END_VERSE" "<verse>\n?\n</verse>")
        ("l" "#+begin_src emacs-lisp\n?\n#+end_src" "<src lang=\"emacs-lisp\">\n?\n</src>")
        ("p" "#+begin_src python\n?\n#+end_src" "<src lang=\"python\">\n?\n</src>")
        ("c" "#+begin_src cpp\n?\n#+end_src" "<src lang=\"cpp\">\n?\n</src>")
        ("L" "#+latex: " "<literal style=\"latex\">?</literal>")
        ("h" "#+begin_html\n?\n#+end_html" "<literal style=\"html\">\n?\n</literal>")
        ("H" "#+html: " "<literal style=\"html\">?</literal>")
        ("a" "#+begin_ascii\n?\n#+end_ascii")
        ("A" "#+ascii: ")
        ("i" "#+index: ?" "#+index: ?")
        ("I" "#+include %file ?" "<include file=%file markup=\"?\">")))
#+END_SRC
** htmlize
#+begin_src emacs-lisp
(use-package htmlize)
#+end_src
** reveal.js
#+begin_src emacs-lisp
(use-package ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)
#+end_src
** org agenda
#+begin_src emacs-lisp
    (global-set-key "\C-ca" 'org-agenda)

    (setq org-agenda-custom-commands
          '(
            (
             "c"
             "Simple agenda view"
             (
              (agenda "")
              (alltodo "")
              )
             )
            )
          )

    (setq org-agenda-files
          (
           list
           "~/Dropbox/org/gcal.org"
           "~/Dropbox/org/schedule.org"
           "~/Dropbox/org/todo.org"
           "~/Dropbox/org/links.org"
           "~/Dropbox/org/index.org"
           )
          )
#+end_src
** org-ac = Auto Complete Org Mode
#+begin_src emacs-lisp
(use-package org-ac
      :init (progn
              (require 'org-ac)
              (org-ac/config-default)
              ))
#+end_src
** org-capture
#+begin_src emacs-lisp
(global-set-key
(kbd "C-c c")
'org-capture)

(setq
 org-capture-templates
 '(
   ("j" "Journal" entry (file "~/Dropbox/org/journal.org")
    "* %t\n** Day\n*** What am I Grateful For:\n1. %?\n2. \n3. \n*** What Would Make Today Great:\n1. \n2. \n3. \n*** Daily Affirmations I am:\n1. \n2. \n3. \n\n** Night\n*** 3 Amazing Things Happened Today:\n1. \n2. \n3. \n*** How could I Make Things Better\n1. \n2. \n3. \n" :prepend t)
   ("l" "Link" entry (file "~/Dropbox/org/links.org")
    "* %?%^L %^g \n%T" :prepend t)
   ("t" "Todo" entry (file "~/Dropbox/org/todo.org")
    "* TODO %?\n%u%T" :prepend t)
   ("n" "Notes" entry (file "~/Dropbox/org/notes.org")
    "* %?\n%u" :prepend t)
   ))
#+end_src
** set-default-browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome")
#+end_src
** open pdf in evince
#+begin_src emacs-lisp
(setq org-file-apps
      (append '(
                ("\\.pdf\\'" . "evince %s")
                ) org-file-apps ))
#+end_src
** org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :config
  (add-hook 'org-mode-hook
            (lambda () (org-bullets-mode 1))))
#+end_src
** literate programming

don't create a new window each time
#+begin_src emacs-lisp
(setq org-src-window-setup 'current-window)
#+end_src

use C-x C-s for closing out of the org-src-edit buffer
#+begin_src emacs-lisp
(eval-after-load 'org-src
  '(define-key org-src-mode-map
     (kbd "C-x C-s") #'org-edit-src-exit))
#+end_srco
* MAGIT

#+begin_src emacs-lisp
(use-package magit
  :commands magit-status magit-blame
  :init
  (defadvice magit-status (around magit-fullscreen activate)
    (window-configuration-to-register :magit-fullscreen)
    ad-do-it
    (delete-other-windows))
  :config
  (setq vc-follow-symlinks nil
        magit-push-always-verify nil
        magit-restore-window-configuration t)
  :bind ("C-x g" . magit-status))
#+end_src
* HELM
#+begin_src emacs-lisp
  p  (use-package helm
    :diminish helm-mode
    :init
    (setq helm-idle-delay 0.0
          helm-input-idle-delay 0.01
          helm-yas-display-key-on-candidate t
          helm-quick-update t
          helm-M-x-requires-pattern nil
          helm-ff-skip-boring-files t)
      (require 'helm)
      (require 'helm-config)
      (helm-mode))


    ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs
    ;; Change to "C-c h"
    (global-set-key (kbd "C-c h") 'helm-command-prefix)
    (global-unset-key (kbd "C-x c"))
    (global-set-key (kbd "M-x") #'helm-M-x)
    (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
    (global-set-key (kbd "C-x C-f") #'helm-find-files)
    (global-set-key (kbd "M-y") 'helm-show-kill-ring)
    (global-set-key (kbd "C-x b") 'helm-mini)
    (global-set-key (kbd "C-c h o") 'helm-occur)
    ; rebind tab to run persistent action
    (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
    ; make TAB work in terminal
    (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
    ; list actions using C-z
    (define-key helm-map (kbd "C-z")  'helm-select-action)

    (when (executable-find "curl")
      (setq helm-google-suggest-use-curl-p t))

    (setq helm-split-window-in-side-p       t ; open helm buffer inside current window, not occupy whole other window
      helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
      helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
      helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
      helm-ff-file-name-history-use-recentf t
      helm-echo-input-in-header-line t)

    (defun spacemacs//helm-hide-minibuffer-maybe ()
      "Hide minibuffer in Helm session if we use the header line as input field."
      (when (with-helm-buffer helm-echo-input-in-header-line)
        (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
          (overlay-put ov 'window (selected-window))
          (overlay-put ov 'face
                       (let ((bg-color (face-background 'default nil)))
                         `(:background ,bg-color :foreground ,bg-color)))
          (setq-local cursor-type nil))))

    (add-hook 'helm-minibuffer-set-up-hook
              'spacemacs//helm-hide-minibuffer-maybe)

    (defun pl/helm-alive-p ()
      (if (boundp 'helm-alive-p)
          (symbol-value 'helm-alive-p)))

  ;  (add-to-list 'golden-ratio-inhibit-functions 'pl/helm-alive-p)

    (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
    (setq helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match    t)
    (setq helm-autoresize-max-height 0)
    (setq helm-autoresize-min-height 20)
    (helm-autoresize-mode 1)
    (helm-mode 1)

    (when (executable-find "ack-grep")
      (setq helm-grep-default-command "ack-grep -Hn --no-group --no-color %e %p %f"
            helm-grep-default-recurse-command "ack-grep -H --no-group --no-color %e %p %f"))
    (setq helm-locate-fuzzy-match t)
    (setq helm-apropos-fuzzy-match t)
#+end_src
* vimish fold
#+begin_src emacs-lisp
(use-package vimish-fold)

(require 'vimish-fold)
(vimish-fold-global-mode 1)
;; this registers a region for future folding/unfolding
(global-set-key (kbd "C-c v") #'vimish-fold)
;; this unregisters the region under point from folding/unfolding
(global-set-key (kbd "C-c d") #'vimish-fold-delete)
;; this is the actual fold/unfold command
(global-set-key (kbd "C-c t") #'vimish-fold-toggle)
#+end_src
* multiple-cursor :DRILL:
#+begin_src emacs-lisp 
  (use-package multiple-cursors
    :config
    (require 'multiple-cursors)
    (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+end_src
* frequent file shortcuts
#+BEGIN_SRC emacs-lisp
  (global-set-key
   (kbd "\e\ec")
   (lambda()
     (interactive)
     (find-file "~/.emacs.d/README.org")))
#+END_SRC
